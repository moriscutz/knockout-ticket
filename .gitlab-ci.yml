variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

stages:
  - build
  - test
  - deploy
  - sonarqube-check
#In a public environment, SonarQube would be aboove deployment, as if sonarqube fails, the image of the backend is not deployed.
#Tests for repository will fail if a database is not running (Preferably run a docker container with DB)

.backend:
  variables:
    ARTIFACTS_PATHS: "build/libs/*.jar"

build:
  stage: build
  extends: .backend
  script:
    - ./gradlew build
  artifacts:
    paths:
      - "$ARTIFACTS_PATHS"
    expire_in: 1 day

test:
  stage: test
  script:
    - ./gradlew test

deploy:
  stage: deploy
  extends: .backend
  needs:
    - test
    - build
  script:
    - echo "Deploying application"
    - |
      $envVars = @(
        "DB_USERNAME=$DB_USERNAME",
        "DB_PASSWORD=$DB_PASSWORD",
        "JWT_SECRET=$JWT_SECRET"
      )
      $envVars | Out-File -FilePath .env -Encoding utf8
    - docker-compose down
    - docker-compose build
    - docker-compose up -d
  artifacts:
    paths:
      - .env
#CONTAINERS ARE REMOVED WHEN RUNNING DOCKER-COMPOSE DOWN, IT IS NOT REQUIRED TO USE DOCKER-COMPOSE STOP BEFORE TO STOP THE CONTAINERS. DOCKER-COMPOSE DOWN DOES THAT AUTOMATICALLY:
#Definition from Docker Documentation: docker compose down
#Description  Stops containers and removes containers, networks, volumes, and images created by up.

sonarqube-check:
  stage: sonarqube-check
  script:
    - ./gradlew test sonar jacocoTestReport


after_script:
  - echo "End CI"